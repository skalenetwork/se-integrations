// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewToken extends EthereumEvent {
  get params(): NewToken__Params {
    return new NewToken__Params(this);
  }
}

export class NewToken__Params {
  _event: NewToken;

  constructor(event: NewToken) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatedToken extends EthereumEvent {
  get params(): UpdatedToken__Params {
    return new UpdatedToken__Params(this);
  }
}

export class UpdatedToken__Params {
  _event: UpdatedToken;

  constructor(event: UpdatedToken) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MyToken__tokensResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MyToken extends SmartContract {
  static bind(address: Address): MyToken {
    return new MyToken("MyToken", address);
  }

  ownerOfToken(param0: Address): BigInt {
    let result = super.call("ownerOfToken", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ownerOfToken(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("ownerOfToken", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: BigInt): MyToken__tokensResult {
    let result = super.call("tokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new MyToken__tokensResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_tokens(param0: BigInt): CallResult<MyToken__tokensResult> {
    let result = super.tryCall("tokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new MyToken__tokensResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  getTokenBalance(owner: Address): BigInt {
    let result = super.call("getTokenBalance", [
      EthereumValue.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenBalance(owner: Address): CallResult<BigInt> {
    let result = super.tryCall("getTokenBalance", [
      EthereumValue.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  doesOwnerExist(owner: Address): boolean {
    let result = super.call("doesOwnerExist", [
      EthereumValue.fromAddress(owner)
    ]);

    return result[0].toBoolean();
  }

  try_doesOwnerExist(owner: Address): CallResult<boolean> {
    let result = super.tryCall("doesOwnerExist", [
      EthereumValue.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class CreateTokenCall extends EthereumCall {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get tokenValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }
}

export class SetTokenValueCall extends EthereumCall {
  get inputs(): SetTokenValueCall__Inputs {
    return new SetTokenValueCall__Inputs(this);
  }

  get outputs(): SetTokenValueCall__Outputs {
    return new SetTokenValueCall__Outputs(this);
  }
}

export class SetTokenValueCall__Inputs {
  _call: SetTokenValueCall;

  constructor(call: SetTokenValueCall) {
    this._call = call;
  }

  get _tokenValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTokenValueCall__Outputs {
  _call: SetTokenValueCall;

  constructor(call: SetTokenValueCall) {
    this._call = call;
  }
}
